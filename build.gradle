buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.0"

    }
}
        
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "kotlin"
apply plugin: 'maven-publish'

version = '1.0.0'
group = 'club.someoneice.lottery'
archivesBaseName = 'lottery'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'
        }

        server {

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
	jcenter()
	maven {
		url "http://maven.shadowfacts.net/"
	}
}


dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    
    compile group: "net.shadowfacts", name: "Forgelin", version: "1.8.4"
}

jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

sourceSets {main {output.resourcesDir = output.classesDir}}